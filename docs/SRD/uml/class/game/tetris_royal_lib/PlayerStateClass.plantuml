@startuml PlayerStateClass





/' Objects '/


class PlayerState {
	-userID_ : UserID
	-username : std::string
	-isAlive_ : bool

	-score_ : Score
	-penaltyTarget_ : std::optional<UserID>
	-receivedPenaltiesQueue_ : std::queue<PenaltyType>
	-stashedPenalties_ : std::deque<PenaltyType>
	-engineTicksSinceLastTick_ : std::optional<size_t>

	-pActiveBonus_ : shared_ptr<TimedBonus>
	-pActivePenalty_ : shared_ptr<TimedPenalty>
	-grantedBonusesQueue_ : std::queue<BonusType>
	-energy_ : std::optional<Energy>

	+PlayerState(UserID userID, std::string username, Score score)
	+PlayerState(const PlayerState &)
	+PlayerState(PlayerState& &)
	+~PlayerState()

	+operator=(const PlayerState &) : PlayerState&
	+operator=(PlayerState& &) : PlayerState&

	+getUserID() : UserID {query}
	+getScore() : Score {query}
	+isAlive() : bool {query}
	+getPenaltyTarget() : std::optional<UserID> {query}
	+getStashedPenalties() : std::deque<PenaltyType>
	+getEnergy() : std::optional<Energy> {query}
	+getActiveBonus() : shared_ptr<TimedBonus>&
	+getActiveBonus() : shared_ptr<TimedBonus>& {query}
	+getActivePenalty() : shared_ptr<TimedPenalty>&
	+getActivePenalty() : shared_ptr<TimedPenalty>& {query}
	
	+increaseScore(Score val) : void
	+setAlive(bool isAlive) : void
	+setPenaltyTarget(UserID userID) : void
	+increaseEnergy(Energy amount) : void
	+decreaseEnergy(Energy amount) : void
	+setActiveBonus(const shared_ptr<TimedBonus>& pTimedBonus) : void
	+setActivePenalty(const shared_ptr<TimedPenalty>& pTimedPenalty) : void

	+receivePenalty(PenaltyType penalty) : void
	+stashPenalty(PenaltyType penalty) : void
	+toggleEffects(bool activated) : void
	+fetchGrantedBonus() : std::optional<BonusType>
	+fetchReceivedPenalty() : std::optional<PenaltyType>
	+grantBonus(BonusType bonus) : void

	+isGameTick() : bool
	+notifyActiveTetrominoPlaced() : void
	+notifyEngineTick() : void
	+notifyLost() : void

	+serializeExternal() : nlohmann::json {query}
	+serializeSelf() : nlohmann::json {query}
}





/' Inheritance relationships '/




/' Aggregation relationships '/





/' Nested objects '/



@enduml
