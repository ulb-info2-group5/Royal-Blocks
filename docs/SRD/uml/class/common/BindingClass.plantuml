@startuml





/' Objects '/

namespace bindings {
	enum BindingType {
		AbortMatchMaking
		Authentication
		AuthenticationResponse
		BigDrop
		BuyBonus
		BuyPenalty
		ChangePassword
		ChangeUsername
		ChangeUsernameResponse
		Conversation
		Conversations
		CreateGame
		EmptyPenaltyStash
		FriendRequest
		FriendsList
		GameState
		GameStateViewer
		HandleFriendRequest
		HoldActiveTetromino
		JoinGame
		Message
		MoveActive
		PendingFriendRequests
		QuitGame
		Ranking
		Registration
		RegistrationResponse
		RemoveClient
		RemoveFriend
		RotateActive
		SelectTarget
		User
		ViewGame
	}

	enum HandleFriendRequest::Action {
		Accept
		Decline
	}

	enum State {
		InGame
		Matchmaking
		Menu
		Offline
		Viewer
	}

	class AbortMatchMaking {
		+{static} from_json(const nlohmann::json& j) : AbortMatchMaking
		+to_json() : nlohmann::json {query}
	}

	class Authentication {
		+{static} from_json(const nlohmann::json& j) : Authentication
		+to_json() : nlohmann::json {query}
		+nickname : std::string
		+password : std::string
	}

	class AuthenticationResponse {
		+{static} from_json(const nlohmann::json& j) : AuthenticationResponse
		+success : bool
		+to_json() : nlohmann::json {query}
	}

	class BigDrop {
		+{static} from_json(const nlohmann::json& j) : BigDrop
		+to_json() : nlohmann::json {query}
	}

	class BuyBonus {
		+bonusType : BonusType
		+{static} from_json(const nlohmann::json& j) : BuyBonus
		+to_json() : nlohmann::json {query}
	}

	class BuyPenalty {
		+{static} from_json(const nlohmann::json& j) : BuyPenalty
		+penaltyType : PenaltyType
		+stashForLater : bool
		+to_json() : nlohmann::json {query}
	}

	class ChangePassword {
		+{static} from_json(const nlohmann::json& j) : ChangePassword
		+to_json() : nlohmann::json {query}
		+password : std::string
	}

	class ChangeUsername {
		+{static} from_json(const nlohmann::json& j) : ChangeUsername
		+to_json() : nlohmann::json {query}
		+username : std::string
	}

	class ChangeUsernameResponse {
		+{static} from_json(const nlohmann::json& j) : ChangeUsernameResponse
		+success : bool
		+to_json() : nlohmann::json {query}
	}

	class Conversation {
		+{static} from_json(const nlohmann::json& j) : Conversation
		+to_json() : nlohmann::json {query}
		+senderMessages : std::vector<SenderMessage>
	}

	class Conversations {
		+{static} from_json(const nlohmann::json& j) : Conversations
		+to_json() : nlohmann::json {query}
		+conversationsById : std::unordered_map<UserID, NameConversation>
	}

	class CreateGame {
		+{static} from_json(const nlohmann::json& j) : CreateGame
		+gameMode : GameMode
		+to_json() : nlohmann::json {query}
		+targetNumPlayers : size_t
	}

	class EmptyPenaltyStash {
		+{static} from_json(const nlohmann::json& j) : EmptyPenaltyStash
		+to_json() : nlohmann::json {query}
	}

	class FriendRequest {
		+{static} from_json(const nlohmann::json& j) : FriendRequest
		+to_json() : nlohmann::json {query}
		+targetName : std::string
	}

	class FriendsList {
		+{static} from_json(const nlohmann::json& j) : FriendsList
		+to_json() : nlohmann::json {query}
		+friendsList : std::vector<User>
	}

	class GameOver {
		+{static} from_json(const nlohmann::json& j) : GameOver
		+to_json() : nlohmann::json {query}
	}

	class HandleFriendRequest {
		+action : Action
		+{static} from_json(const nlohmann::json& j) : HandleFriendRequest
		+userId : UserID
		+to_json() : nlohmann::json {query}
	}

	class HoldNextTetromino {
		+{static} from_json(const nlohmann::json& j) : HoldNextTetromino
		+to_json() : nlohmann::json {query}
	}

	class JoinGame {
		+gameMode : GameMode
		+{static} from_json(const nlohmann::json& j) : JoinGame
		+to_json() : nlohmann::json {query}
		+friendId : std::optional<UserID>
	}

	class Message {
		+{static} from_json(const nlohmann::json& j) : Message
		+recipientId : UserID
		+to_json() : nlohmann::json {query}
		+content : std::string
	}

	class MoveActive {
		+{static} from_json(const nlohmann::json& j) : MoveActive
		+tetrominoMove : TetrominoMove
		+to_json() : nlohmann::json {query}
	}

	class PendingFriendRequests {
		+{static} from_json(const nlohmann::json& j) : PendingFriendRequests
		+to_json() : nlohmann::json {query}
		+requests : std::vector<bindings::User>
	}

	class QuitGame {
		+{static} from_json(const nlohmann::json& j) : QuitGame
		+to_json() : nlohmann::json {query}
	}

	class Ranking {
		+{static} from_json(const nlohmann::json& j) : Ranking
		+to_json() : nlohmann::json {query}
		+ranking : std::vector<PlayerScore>
	}

	class Registration {
		+{static} from_json(const nlohmann::json& j) : Registration
		+to_json() : nlohmann::json {query}
		+nickname : std::string
		+password : std::string
	}

	class RegistrationResponse {
		+{static} from_json(const nlohmann::json& j) : RegistrationResponse
		+success : bool
		+to_json() : nlohmann::json {query}
	}

	class RemoveFriend {
		+{static} from_json(const nlohmann::json& j) : RemoveFriend
		+userID : UserID
		+to_json() : nlohmann::json {query}
	}

	class RotateActive {
		+{static} from_json(const nlohmann::json& j) : RotateActive
		+rotateClockwise : bool
		+to_json() : nlohmann::json {query}
	}

	class SelectTarget {
		+{static} from_json(const nlohmann::json& j) : SelectTarget
		+targetId : UserID
		+to_json() : nlohmann::json {query}
	}

	class User {
		+User()
		+User(UserID USERID, std::string USERNAME, State STATE, std::optional<GameMode> GAMEMODE)
		+state : State
		+{static} from_json(const nlohmann::json& j) : User
		+userID : UserID
		+isJoinable() : bool {query}
		+to_json() : nlohmann::json {query}
		+gameMode : std::optional<GameMode>
		+username : std::string
	}

	class ViewGame {
		+targetUser : UserID
		+{static} from_json(const nlohmann::json& j) : ViewGame
		+to_json() : nlohmann::json {query}
	}
}





/' Inheritance relationships '/




/' Aggregation relationships '/

bindings.FriendsList *-- bindings.User


bindings.PendingFriendRequests *-- bindings.User


bindings.User *-- bindings.State






/' Nested objects '/

bindings.HandleFriendRequest +-- bindings.HandleFriendRequest.Action




@enduml
