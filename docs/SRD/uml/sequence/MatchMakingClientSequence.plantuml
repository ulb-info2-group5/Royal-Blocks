@startuml MatchMakingClientSequence

skinparam style strictuml

actor User
participant Menu
participant GameMenu
participant GameDisplay
participant NetworkManager
participant Controller
participant Network

activate User
activate Menu
activate NetworkManager
activate Controller
activate Network

User -> Menu : selectAGameOption
Menu -> GameMenu : <<create>>
deactivate Menu
activate GameMenu

alt User is creating a Game
    GameMenu -> GameMenu : renderOnlineGames()
    User -> GameMenu : selectGameMode
    opt GameMode != Dual && GameMode != Endless
        GameMenu -> GameMenu : selectPlayerCountScreen()
        User -> GameMenu : selectNumberOfPlayers()
    end 
    GameMenu -> Controller : createGame(GameMode, numberOfPlayers)
    GameMenu -> GameMenu : createGameScreen()
    Controller -> NetworkManager : send(bindingsCreateGame{GameMode, numberOfPlayers})
    NetworkManager -> Network : send(bindingsCreateGame{GameMode, numberOfPlayers})
else User is joining a Game
    GameMenu -> GameMenu : renderAllGames()
    User -> GameMenu : selectGameMode
    GameMenu -> GameMenu : joinFriendOrRandomScreen()
    User -> GameMenu : makeAChoice
    GameMenu -> GameMenu : handleChoice() 
        alt User choose to join a friend
            GameMenu -> GameMenu : joinFriendScreen()
            Controller -> GameMenu : getFriendsList() 
            GameMenu -> GameMenu : joinFriendScreen() 
            User -> GameMenu : selectFriend
            GameMenu -> Controller : joinGame(gameMode, userID)
            GameMenu -> GameMenu : waitingFriendScreen()
            Controller -> NetworkManager : send(bindingJoinGame{GameMode, friendID})
            NetworkManager -> Network : send(bindingJoinGame{GameMode, friendID})
        else User choose to join random screen
            GameMenu -> GameMenu : joinRandomScreen()
            GameMenu -> Controller : joinGame(GameMode, Null)
            Controller -> NetworkManager : send(bindingsJoinGame{GameMode, Null})
            NetworkManager -> Network : send(bindingsJoinGame{GameMode, Null})
        end 
end 
loop [ quitMenu_ != true ] 
    alt joinType_ == JoinType::Friend : 
        GameMenu -> GameMenu : joinFriendScreen()
    else joinType_ == JoinType::Random  
        GameMenu -> GameMenu : joinRandomScreen()
    end
end

Network -> NetworkManager : send(gameState)
NetworkManager -> Controller : handlerPacket(gameState)
Controller -> Controller : gameState_  = gameState

GameMenu -> GameDisplay : render()
activate GameDisplay
deactivate GameMenu
Controller -> GameDisplay : getGameState()
@enduml