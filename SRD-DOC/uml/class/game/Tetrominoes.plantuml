@startuml (id=Tetromino)

' skinparam class {
'     BackgroundColor AntiqueWhite
' }

'is the Tetromino class still an abstract class ?'
abstract class AbstractTetromino {
    - width_ : int
    - height_ : int
    - shape_ : TetraminoShape
    - anchorPoint_ : Coordinate
    - body_ : vector<Coordinate>
    '----SRS----'
    -rotationIdx_ : RotationIdx_
    -prevRotationIdx : RotationIdx_
    -offsetData_ : const <vector<vector<Coordinate>>&
    
    '----kick data----'
    # {static} O_OFFSET_DATA : const vector<vector<Coordinate>>
    # {static} I_OFFSET_DATA : const vector<vector<Coordinate>>
    # {static} ZLSJT_OFFSET_DATA : const vector<vector<Coordinate>>
    '----Constructor----'
    # Tetromino(anchorPoint : Coordinate&&, body : vector<Coordinate>&&, offsetData : vector<vector<Coordinate>>&, shape : TetrominoShape )
    #Tetromino(other : Tetromino&&)
    + Tetromino(other : const Tetromino&)
    '----Destructor----'
    + <<virtual>> ~Tetromino()
    '----Factory----'
    + {static} makeTetromino(shape : TetrominoShape, anchorPoint : Coordinate&&) : unique_ptr<Tetromino>
    '----Getters----'
    + <<virtual>> getWidth() : int  
    + <<virtual>> getHeight() : int
    + <<virtual>> getShape() : TetrominoShape
    + <<virtual>> getAnchorPoint() : Coordinate&
    + <<virtual>> getBody() : vector<Coordinate>>&
    + <<virtual>> getRotationIndex() : RotationIndex&
    + <<virtual>> getPrevRotationIndex() : RotationIndex&
    '+ <<virtual>> getNumOfTests() : uint8_t'
    + <<virtual>> getNthKick(kickIndex : uint8_t) : unique_ptr<Tetromino>
    + <<virtual>> getColorId() : unsigned
    '----Setters----'
    + <<virtual>> setAnchorPoint(anchorPoint : const Coordinate&)
    '----Action----'
    + <<virtual>> rotate(rotateClockwise : bool) 
    + <<virtual>> move(direction : Direction, reverse : bool = false)
    '----Comparisions----'
    + <<virtual>> operator==(other : const Tetromino&) : bool
    '----Output----'
 



    + tryMove(direction : Direction)
    + tryRotate()
}


enum TetrominoShape {
    Z 
    L
    O
    S
    I
    J
    T
    NUM_TETROMINOSHAPE

}

enum Direction {
    left
    right
    down
}


enum Color {

}


class TetrominoI extends AbstractTetromino { 
    ' <<move >> is just to clarify that it's a move constructor'
    +<<move>>TetrominoI(anchorPoint : Coordinate&& ) 
}
class TetrominoO extends AbstractTetromino { 
    +TetrominoO(anchorPoint : Coordinate&& )

}
class TetrominoT extends AbstractTetromino { 
    +TetrominoT(anchorPoint : Coordinate&&)
}

class TetrominoS extends AbstractTetromino { 
    +TetrominoS(anchorPoint : Coordinate&& )
}

class TetrominoZ extends AbstractTetromino { 
    +TetrominoZ(anchorPoint : Coordinate&&)
}

class TetrominoL extends AbstractTetromino { 
    +TetrominoL(anchorPoint : Coordinate&&)
}

class TetrominoJ extends AbstractTetromino { 
    +TetrominoZ(anchorPoint : Coordinate&&)
}

' AbstractTetromino.-> TetrominoShape : uses
' AbstractTetromino .-> Direction : uses

@enduml