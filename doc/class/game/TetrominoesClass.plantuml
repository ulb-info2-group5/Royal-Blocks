@startuml (id=Tetromino)

' skinparam class {
    '     BackgroundColor AntiqueWhite
    '}


abstract class Tetromino {
    - width_ : size_t
    - height_ : size_t
    - shape_ : TetraminoShape
    - anchorPoint_ : Coordinate
    - body_ : vector<Coordinate>

    '----SRS----'
    -rotationIdx_ : RotationIdex
    -prevRotationIdx : RotationIndex
    -offsetData_ : const <vector<vector<Coordinate>>&

    '----kick data----'
    # {static} O_OFFSET_DATA : const vector<vector<Coordinate>>
    # {static} I_OFFSET_DATA : const vector<vector<Coordinate>>
    # {static} ZLSJT_OFFSET_DATA : const vector<vector<Coordinate>>

    '----Constructor----'
    # Tetromino(anchorPoint : Coordinate&&, body : vector<Coordinate>&&, offsetData : vector<vector<Coordinate>>&, shape : TetrominoShape )
    # Tetromino(other : Tetromino&&)
    + Tetromino(other : const Tetromino&)

    '----Destructor----'
    + ~Tetromino()

    '----Factory----'
    + {static} makeTetromino(shape : TetrominoShape, anchorPoint : Coordinate&&) : unique_ptr<Tetromino>

    '----Getters----'
    + getWidth() : const int
    + getHeight() : const int
    + getShape() : TetrominoShape
    + getAnchorPoint() : const Coordinate&
    + getBody() : const vector<Coordinate>>&
    + getRotationIndex() : const RotationIndex&
    + getPrevRotationIndex() : const RotationIndex&
    '+ getNumOfTests() : uint8_t'
    + getNthOffset(kickIndex : uint8_t) : const unique_ptr<Tetromino>
    + getColorId() : const unsigned

    '----Setters----'
    + setAnchorPoint(anchorPoint : const Coordinate&)

    '----Action----'
    + rotate(rotateClockwise : bool)
    + move(direction : Direction, reverse : bool = false)

    '----Comparisons----'
    + operator==(other : const Tetromino&) : bool
    
}


enum TetrominoShape {
    Z
    L
    O
    S
    I
    J
    T
    NUM_TETROMINOSHAPE
}

' enum Direction {
'     left
'     right
'     down
' }


enum Color {

}


class TetrominoI extends Tetromino {

    +TetrominoI(anchorPoint : Coordinate&& )
}
class TetrominoO extends Tetromino {

    +TetrominoO(anchorPoint : Coordinate&& )

}
class TetrominoT extends Tetromino {

    +TetrominoT(anchorPoint : Coordinate&&)
}

class TetrominoS extends Tetromino {

    +TetrominoS(anchorPoint : Coordinate&& )
}

class TetrominoZ extends Tetromino {

    +TetrominoZ(anchorPoint : Coordinate&&)
}

class TetrominoL extends Tetromino {

    +TetrominoL(anchorPoint : Coordinate&&)
}

class TetrominoJ extends Tetromino {

    +TetrominoZ(anchorPoint : Coordinate&&)
}

' Tetromino.-> TetrominoShape : uses
' Tetromino .-> Direction : uses

@enduml