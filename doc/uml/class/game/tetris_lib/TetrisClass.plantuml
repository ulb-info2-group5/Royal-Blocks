@startuml (id=Tetris)

class Tetris {
	-board_ : Board
	-holdTetromino_ : shared_ptr<ATetromino>
	-previewTetromino_ : shared_ptr<ATetromino>
	-tetrominoQueue_ : TetrominoQueue
	-activeTetromino_ : shared_ptr<ATetromino>
	-canHold_ : bool
	-tetrisObservers_ : std::vector<shared_ptr<TetrisObserver>>

	-lockDelayTicksNum_ : uint32_t
	-ticksSinceLockStart_ : uint32_t

	-checkCanDrop(const ATetromino& tetromino) : bool {query}
	-checkEmptyCell(size_t xCol, size_t yRow) : bool {query}

	-resetLockDelay() : void
	-placeActive() : void
	-updatePreviewTetromino() : void
	
	+Tetris()
	+Tetris(Tetris& &)
	+~Tetris()

	+operator=(Tetris& &) : Tetris&

	+{static} createTetromino(TetrominoShape tetrominoShape) : shared_ptr<ATetromino>
	+{static} getTetrominoInitialAnchorPoint(TetrominoShape tetrominoShape) : Vec2
	+getTetrominoesQueueSize() : size_t {query}

	+destroy2By2Occupied() : void
	+insertNextTetromino(shared_ptr<ATetromino>&& pTetromino) : void

	+eventBigDrop() : size_t
	+eventClockTick() : size_t
	+eventHoldNextTetromino() : void
	+eventTryMoveActive(TetrominoMove tetrominoMove) : size_t
	+eventTryRotateActive(bool rotateClockwise) : void
	+eventReceivePenaltyRows(int numPenalties) : void
	
	+addObserver(shared_ptr<TetrisObserver> pTetrisObserver) : void
	+removeObserver(shared_ptr<TetrisObserver> pTetrisObserver) : void

	+serializeExternal() : nlohmann::json {query}
	+serializeSelf(bool emptyBoard) : nlohmann::json {query}
}

@enduml