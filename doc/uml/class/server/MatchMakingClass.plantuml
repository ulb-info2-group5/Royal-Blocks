@startuml MatchMakingClass

skinparam linetype ortho

class Matchmaking {
	-gamesCanditatesClassic_ : std::vector<GameCandidate>
	-gamesCanditatesDuel_ : std::vector<GameCandidate>
	-gamesCanditatesRoyalCompetition_ : std::vector<GameCandidate>

	-getGame(GameMode gameMode) : std::vector<GameCandidate>&

	-createNewGameCandidate(std::vector<GameCandidate>& games, RequestJoinGame joinGame) : void
	-startGame(GameCandidate&& gameCandidate) : void
	-gameFindCallback_ : function<void ( std::vector<Player>, GameMode )>

	+Matchmaking(function<void ( std::vector<Player>, GameMode )> gameFindCallback)
	+~Matchmaking()

	+createAGame(RequestCreateGame createGame) : void
	+findaGame(std::vector<GameCandidate>& games, RequestJoinGame joinGame) : void
	+addPlayer(RequestJoinGame joinGame) : void
	+removePlayer(UserID playerID, GameMode gameMode) : void
	+abortMatchmaking(const std::shared_ptr<ClientLink>& clientLink) : void
}


class GameCandidate {
	-gameMode : GameMode
	-numberOfPlayerTotale_ : size_t
	-numberOfPlayersMax_ : size_t
	-players_ : std::vector<Player>

	+GameCandidate(RequestJoinGame joinGame)
	+GameCandidate(RequestCreateGame createGame)
	+~GameCandidate()
	
	+getGameMode() : GameMode
	+getPlayers() : std::vector<Player>&
	+getPlayerIDs() : std::vector<UserID>
	+isthisPlayerInThisGame(UserID userId) : bool
	+isEmpty() : bool
	+isThereRoomInThisGame() : bool
	+isThisPartyReady() : bool

	+tryToAddPlayer(RequestJoinGame joinGame) : bool
	+removePlayer(UserID playerID) : void
}

class Player {
	+userID : UserID
	+username : std::string
}

class RequestCreateGame {
	+player : Player
	+bindCreateGame : bindings::CreateGame
}


class RequestJoinGame {
	+player : Player
	+bindGame : bindings::JoinGame
}

Matchmaking *-- "0..n" GameCandidate

Matchmaking *-- Player

RequestCreateGame *-- Player

RequestJoinGame *-- Player

@enduml