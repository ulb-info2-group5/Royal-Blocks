@startuml GameServerClass





/' Objects '/
class GamesManager {
	-nextGameId : GameID
	-gameSessions_ : std::unordered_map<GameID, std::shared_ptr<GameServer>>
	-gamethreads_ : std::unordered_map<GameID, std::thread>

	-mutex : std::mutex
	-running : std::atomic<bool>
	-cv : std::condition_variable
	-finishedGames_ : std::queue<GameID>
	-joinerThread_ : std::thread

	-joinerThreadFunc() : void
	-updateRankingCallback_ : function<void ( )>
	-notifyGameFinished(int gameID) : void
	-saveScoreCallback_ : function<void ( UserID, int )>

	+GamesManager(function<void ( UserID, int )> saveScoreCallback, function<void ( )> updateRankingCallback)
	+~GamesManager()

	+joinGameAsViewer(const std::shared_ptr<ClientLink> viewerLink, const std::shared_ptr<ClientLink> friendLink) : void
	+makeClientJoinGame(std::shared_ptr<ClientLink> clientLink, std::shared_ptr<GameServer> gameServer) : void
	+startGameServeur(GameMode gameMode, std::vector<Player> players) : std::shared_ptr<GameServer>

	+enqueueGameBinding(const std::shared_ptr<ClientLink>& clientLink, const std::string& strBindings) : void

	+quiGameAsViewer(const std::shared_ptr<ClientLink>& viewerLink) : void
	+callBackFinishGame(GameID gameId) : void
	+shutdown() : void
}

class GameServer {
	-engine : GameEngine
	-pGameState_ : GameStatePtr
	-pClientLinks_ : std::vector<std::weak_ptr<ClientLink>>

	-gameId_ : size_t
	-context_ : boost::asio::io_context
	-gameMutex_ : std::mutex
	-tickTimer_ : boost::asio::steady_timer
	-tickDelayMs_ : size_t

	-{static} DECREASE_TICK_DELAY_MS : static constexpr size_t
	-{static} INITIAL_TICK_DELAY_MS : static constexpr size_t
	-{static} MIN_TICK_DELAY_MS : static constexpr size_t
	
	-callBackFinishGame_ : function<void ( GameID )>
	-onTimerTick() : void
	-erasmePlayer(UserID userID) : void

	+GameServer(GameMode gameMode, std::vector<Player>&& players, size_t id, function<void ( GameID )> callBackFinishGame)

	+getGameMode() : GameMode {query}
	+getPlayerScore(const UserID userId) : int {query}
	+getVectorPlayersId() : std::vector<UserID>
	+getClientLinks() : std::vector<std::weak_ptr<ClientLink>>&
	
	+addClientLink(std::weak_ptr<ClientLink> clientLink) : void
	+enqueueBinding(UserID userId, const std::string& bindingStr) : void
	+sendGameStates() : void
	+run() : void

	+quitGameAsViewer(UserID userID) : void
}

class Player {
	+userID : UserID
	+username : std::string
}


/' Inheritance relationships '/




/' Aggregation relationships '/

GamesManager o--"0..n" GameServer


/' Nested objects '/



@enduml
