@startuml BindingClass
skinparam linetype ortho

/' Objects '/

namespace bindings {
	enum BindingType {
		Authentication
		AuthenticationResponse
		BigDrop
		BuyBonus
		BuyPenalty
		ChangePassword
		ChangeUsername
		Conversation
		Conversations
		CreateGame
		EmptyPenaltyStash
		FriendRequest
		FriendsList
		GameState
		HandleFriendRequest
		HoldNextTetromino
		JoinGame
		Message
		MoveActive
		PendingFriendRequests
		QuitGame
		Ranking
		Registration
		RegistrationResponse
		RemoveClient
		RemoveFriend
		RotateActive
		SelectTarget
		User
	}

	enum HandleFriendRequest::Action {
		Accept
		Decline
	}

	enum User::State {
		InGame
		Matchmaking
		Menu
		Offline
	}

	class Authentication {
		+{static} from_json(const nlohmann::json& j) : Authentication
		+to_json() : nlohmann::json {query}
		+nickname : std::string
		+password : std::string
	}

	class AuthenticationResponse {
		+{static} from_json(const nlohmann::json& j) : AuthenticationResponse
		+success : bool
		+to_json() : nlohmann::json {query}
	}

	class BigDrop {
		+{static} from_json(const nlohmann::json& j) : BigDrop
		+to_json() : nlohmann::json {query}
	}

	class BuyBonus {
		+bonusType : BonusType
		+{static} from_json(const nlohmann::json& j) : BuyBonus
		+to_json() : nlohmann::json {query}
	}

	class BuyPenalty {
		+{static} from_json(const nlohmann::json& j) : BuyPenalty
		+penaltyType : PenaltyType
		+stashForLater : bool
		+to_json() : nlohmann::json {query}
	}

	class ChangePassword {
		+{static} from_json(const nlohmann::json& j) : ChangePassword
		+to_json() : nlohmann::json {query}
		+password : std::string
	}

	class ChangeUsername {
		+{static} from_json(const nlohmann::json& j) : ChangeUsername
		+to_json() : nlohmann::json {query}
		+username : std::string
	}

	class Conversation {
		+{static} from_json(const nlohmann::json& j) : Conversation
		+to_json() : nlohmann::json {query}
		+senderMessages : std::vector<SenderMessage>
	}

	class Conversations {
		+{static} from_json(const nlohmann::json& j) : Conversations
		+to_json() : nlohmann::json {query}
		+conversationsById : std::unordered_map<PlayerID, NameConversation>
	}

	class CreateGame {
		+{static} from_json(const nlohmann::json& j) : CreateGame
		+gameMode : GameMode
		+to_json() : nlohmann::json {query}
		+targetNumPlayers : size_t
	}

	class EmptyPenaltyStash {
		+{static} from_json(const nlohmann::json& j) : EmptyPenaltyStash
		+to_json() : nlohmann::json {query}
	}

	class FriendRequest {
		+{static} from_json(const nlohmann::json& j) : FriendRequest
		+to_json() : nlohmann::json {query}
		+targetName : std::string
	}

	class FriendsList {
		+{static} from_json(const nlohmann::json& j) : FriendsList
		+to_json() : nlohmann::json {query}
		+friendsList : std::vector<User>
	}

	class HandleFriendRequest {
		+action : Action
		+{static} from_json(const nlohmann::json& j) : HandleFriendRequest
		+user : User
		+to_json() : nlohmann::json {query}
	}

	class HoldNextTetromino {
		+{static} from_json(const nlohmann::json& j) : HoldNextTetromino
		+to_json() : nlohmann::json {query}
	}

	class JoinGame {
		+gameMode : GameMode
		+{static} from_json(const nlohmann::json& j) : JoinGame
		+to_json() : nlohmann::json {query}
		+friendId : std::optional<PlayerID>
	}

	class Message {
		+{static} from_json(const nlohmann::json& j) : Message
		+to_json() : nlohmann::json {query}
		+recipientId : size_t
		+content : std::string
	}

	class MoveActive {
		+{static} from_json(const nlohmann::json& j) : MoveActive
		+tetrominoMove : TetrominoMove
		+to_json() : nlohmann::json {query}
	}

	class PendingFriendRequests {
		+{static} from_json(const nlohmann::json& j) : PendingFriendRequests
		+to_json() : nlohmann::json {query}
		+requests : std::vector<bindings::User>
	}

	class QuitGame {
		+{static} from_json(const nlohmann::json& j) : QuitGame
		+to_json() : nlohmann::json {query}
	}

	class Ranking {
		+{static} from_json(const nlohmann::json& j) : Ranking
		+to_json() : nlohmann::json {query}
		+ranking : std::vector<PlayerScore>
	}

	class Registration {
		+{static} from_json(const nlohmann::json& j) : Registration
		+to_json() : nlohmann::json {query}
		+nickname : std::string
		+password : std::string
	}

	class RegistrationResponse {
		+{static} from_json(const nlohmann::json& j) : RegistrationResponse
		+success : bool
		+to_json() : nlohmann::json {query}
	}

	class RemoveFriend {
		+{static} from_json(const nlohmann::json& j) : RemoveFriend
		+to_json() : nlohmann::json {query}
		+playerId : size_t
	}

	class RotateActive {
		+{static} from_json(const nlohmann::json& j) : RotateActive
		+rotateClockwise : bool
		+to_json() : nlohmann::json {query}
	}

	class SelectTarget {
		+{static} from_json(const nlohmann::json& j) : SelectTarget
		+to_json() : nlohmann::json {query}
		+targetId : size_t
	}

	class User {
		+state : State
		+{static} from_json(const nlohmann::json& j) : User
		+isJoinable() : bool {query}
		+to_json() : nlohmann::json {query}
		+playerId : size_t
		+gameMode : std::optional<GameMode>
		+username : std::string
	}
}





/' Inheritance relationships '/




/' Aggregation relationships '/

bindings.FriendsList *-- bindings.User


bindings.HandleFriendRequest *-- bindings.User


bindings.PendingFriendRequests *-- bindings.User






/' Nested objects '/

bindings.HandleFriendRequest +-- bindings.HandleFriendRequest.Action


bindings.User +-- bindings.User.State




@enduml
