@startuml ControllerClass


skinparam linetype ortho


/' Objects '/

class Controller {
	+Controller()
	+~Controller()
	-authState_ : AuthState
	+getGameMode() : GameMode {query}
	+getConversationWith(PlayerID playerID) : NameConversation&
	-networkManager_ : NetworkManager
	-registrationState_ : RegistrationState
	+getSelfEnergy() : Score {query}
	+getSelfScore() : Score {query}
	-screenManager_ : ScreenManager
	+gameHasStarted() : bool {query}
	-context_ : boost::asio::io_context
	+getAuthState() : int {query}
	+getRegistrationState() : int {query}
	-mutex_ : mutable std::mutex
	+getNumOpponents() : size_t {query}
	-gameState_ : std::optional<client::GameState>
	+opponentsBoardGetColorIdAt(size_t opponentIdx, int x, int y) : std::optional<unsigned> {query}
	+selfBoardGetColorIdAt(int x, int y) : std::optional<unsigned> {query}
	-ioThread_ : std::thread
	-conversationsById_ : std::unordered_map<PlayerID, NameConversation>
	-friendsList_ : std::vector<bindings::User>
	+getFriendsList() : std::vector<bindings::User>& {query}
	+getRanking() : std::vector<std::pair<std::string , Score>>& {query}
	-ranking_ : std::vector<std::pair<std::string, Score>>
	+bigDrop() : void
	+changeProfile(const std::string& username, const std::string& password) : void
	+createGame(GameMode gameMode, size_t targetNumPlayers) : void
	+emptyPenaltyStash() : void
	+handleKeypress(const std::string& pressedKey) : void
	-handlePacket(const std::string& pack) : void
	+holdNextTetromino() : void
	+joinGame(GameMode gameMode, std::optional<PlayerID> friendID) : void
	+moveActive(TetrominoMove tetrominoMove) : void
	+quitGame() : void
	+removeFriend(PlayerID playerID) : void
	+rotateActive(bool clockwise) : void
	+run() : void
	+sendFriendRequest(const std::string& username) : void
	+sendMessage(PlayerID recipientId, const std::string& message) : void
	+tryLogin(const std::string& username, const std::string& password) : void
	+tryRegister(const std::string& username, const std::string& password) : void
}


enum Controller::AuthState {
	Authenticated
	Failed
	Unauthenticated
}


enum Controller::RegistrationState {
	Failed
	Registered
	Unregistered
}





/' Inheritance relationships '/




/' Aggregation relationships '/





/' Nested objects '/

Controller +-- Controller::AuthState


Controller +-- Controller::RegistrationState




@enduml
